# run reloadExtensions to reload

# remove alias
rmalias() {
  if alias $1 2>/dev/null; then
    unalias $1
  fi
}

# remove function
rmfunction() {
  if declare -f -F $1 > /dev/null; then
    unset -f $1
  fi
}

# add highlighting for substrings
highlight() {
    declare -A fg_color_map
    fg_color_map[black]=30
    fg_color_map[red]=31
    fg_color_map[green]=32
    fg_color_map[yellow]=33
    fg_color_map[blue]=34
    fg_color_map[magenta]=35
    fg_color_map[cyan]=36

    fg_c=$(echo -e "\e[1;${fg_color_map[$1]}m")
    c_rs=$'\e[0m'
    sed -u s"/$2/$fg_c\0$c_rs/g"
}

bashwatch() {
    while true; do clear; $@; sleep 2; done
}

alias watch="bashwatch"

# Displays all nodes in the cluster including kubernetes version info
alias nodes="k get nodes -o=custom-columns=Name:.metadata.name,IP:.status.addresses[0].address,Kubelet:.status.nodeInfo.kubeletVersion,Health:.status.conditions[*].reason,CPU:.status.allocatable.cpu,MEM:.status.allocatable.memory | highlight green 'KubeletReady' | highlight green 'KernelHasNoDeadlock' | highlight green 'KubeletHasNoDiskPressure' | highlight green 'KubeletHasSufficientMemory' | highlight green 'KubeletHasSufficientDisk'"

# Force a deletion
alias deletef="k delete --grace-period=0 --force"

# Get events in order
alias events="k get events --sort-by='{.lastTimestamp}'"

# get images that pods use in your namespace with a count
alias pod-images="k get pods --no-headers -o=custom-columns=Images:.spec.containers[*].image | tr ',' '\n' | sort | uniq -c"

# get pods and their images sorted by image
alias pods-with-image="k get pods --no-headers -o=go-template --template='{{range .items}}{{\$pod := .metadata.name}}{{range .spec.containers}}{{\$pod}}{{\"\t\"}}{{.name}}{{\"\t\"}}{{.image }}{{\"\n\"}}{{end}}{{end}}' | sort -k 3"

# get overall pod status report
alias pod-report="k get pods --all-namespaces --no-headers -o=custom-columns=Status:.status.phase | sort | uniq -c | highlight green Running"

# pods with colours
rmalias pods
pods() {
  k get pods $@ | highlight green 'Running'
}

all-pods() {
  k get pods --all-namespaces $@ | highlight green 'Running'
}

ssh-nodes() {
  SSH_ARGS="${@}"
  k get nodes --no-headers -o=custom-columns=IP:.status.addresses[0].address | \
    xargs -INODE -n1 -P1 sh -c "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ${K8S_SSH_USER-core}@NODE ${SSH_ARGS} | sed -e 's/^/NODE:\t/'"
}

nodeips() {
  k get nodes -o jsonpath={.items[*].status.addresses[?\(@.type==\"ExternalIP\"\)].address}
}

# add grep to pods/nodes listing, eg:
# $ pods? -v Running
# $ nodes? cr2
# $ pods-with-image? hyperkube
alias pods?="pods -o wide | grep"
alias all-pods?="all-pods -o wide | grep"
alias nodes?="nodes | grep"
alias pod-images?="pod-images | grep"
alias pods-with-image?="pods-with-image | grep"

# Pick a random node in Ready state
get-random-node() {
  k get nodes | grep ' Ready' | awk '{ print $1 }' | shuf -n 1
}

# Runs a busybox container (optionally selecting the a specific node to run on)
# and shells into it.
busybox() {
  delete po/busybox
  OVERRIDE_PARAM=""
  U=""
  if [[ $1 ]]; then
    echo "Restricting pod to node: $1"
    OVERRIDE_PARAM="{ \"spec\": { \"nodeName\": \"$1\", \"serviceAccountName\": \"kube-controller-manager\" } }"
  else
    echo "Restricting pod to node: $NODETOUSE"
    OVERRIDE_PARAM="{ \"spec\": { \"nodeName\": \"$NODETOUSE\", \"serviceAccountName\": \"kube-controller-manager\" } }"
  fi
  if [[ $KUSER ]]; then
    U="--user=$KUSER"
  fi
  k $U run -i --tty toolbox --limits='cpu=200m,memory=512Mi' --image=${TOOLBOX_IMAGE-busybox} --restart=Never --overrides="$OVERRIDE_PARAM" -- sh
}

# Runs a temporary kube-scheduler
# Assumes self hosting setup
temp-scheduler() {
  delete pod/temp-scheduler
  U=""
  NODETOUSE="$(get-random-node)"
  if [[ $1 ]]; then
    NODETOUSE=$1
  fi
  if [[ $KUSER ]]; then
    U="--user=$KUSER"
  fi
  k $U --namespace kube-system get deployment kube-scheduler -o json | jq '.spec.template * {"kind": "Pod", "apiVersion": "v1", "metadata": {"name": "temp-scheduler", "namespace": "kube-system", "labels": {"k8s-app": "temp-scheduler"}}}' | jq ".spec.nodeName = \"$NODETOUSE\"" | kubectl $U create -f -
}

# Runs a temporary kube-controller-manager
# Assumes self hosting setup
temp-controller-manager() {
  delete pod/temp-controller-manager
  U=""
  NODETOUSE="$(get-random-node)"
  if [[ $1 ]]; then
    NODETOUSE=$1
  fi
  if [[ $KUSER ]]; then
    U="--user=$KUSER"
  fi
  k $U --namespace kube-system get deployment kube-controller-manager -o json | jq '.spec.template * {"kind": "Pod", "apiVersion": "v1", "metadata": {"name": "temp-controller-manager", "namespace": "kube-system", "labels": {"k8s-app": "temp-controller-manager"}}}' | jq ".spec.nodeName = \"$NODETOUSE\"" | kubectl $U create -f -
}

# removes the temporary scheduler and controller manager when not required
delete-temp-components() {
  U=""
  if [[ $KUSER ]]; then
    U="--user=$KUSER"
  fi
  delete $U pod/temp-scheduler
  delete $U pod/temp-controller-manager
}
